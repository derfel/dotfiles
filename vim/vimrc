" =======================================
" Who: Jeremy Mack (@mutewinter)
" What: .vimrc of champions
" Version: 1.1 (this may never change because who versions dot files,
" honestly)
" =======================================

" ----------------------------------------
" Vundle
" ----------------------------------------

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.

" ---------------
" Plugin Bundles
" ---------------

" Navigation
Plugin 'FuzzyFinder'
Plugin 'ZoomWin'
Plugin 'wincent/Command-T'
" This fork is required due to remapping ; to :
Plugin 'christoomey/vim-space'
Plugin 'Lokaltog/vim-easymotion'
"Plugin 'Lokaltog/vim-powerline'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'mutewinter/LustyJuggler'
" UI Additions
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'myusuf3/numbers.vim'
" 404 Plugin 'dickeytk/status.vim'
Plugin 'dickeyxxx/status.vim'
Plugin 'scrooloose/nerdtree'
"Plugin 'mutewinter/ir_black_mod'
Plugin 'godlygeek/csapprox'
"Plugin 'Rykka/ColorV'
" Commands
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-speeddating'
Plugin 'qwertologe/nextval.vim'
Plugin 'terryma/vim-expand-region'
Plugin 'tpope/vim-fugitive'
Plugin 'ludovicchabant/vim-lawrencium'
Plugin 'mhinz/vim-signify'
Plugin 'godlygeek/tabular'
Plugin 'mileszs/ack.vim'
Plugin 'tpope/vim-abolish'
" Automatic Helpers
Plugin 'IndexedSearch'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
Plugin 'Raimondi/delimitMate'
Plugin 'scrooloose/syntastic'
Plugin 'gregsexton/MatchTag'
Plugin 'vim-scripts/VisIncr'
Plugin 'chrisbra/SudoEdit.vim'
Plugin 'terryma/vim-multiple-cursors'
"Plugin 'docunext/closetag.vim'
"Plugin 'sjl/gundo.vim'
Plugin 'mbbill/undotree'
Plugin 'majutsushi/tagbar'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'alvan/vim-closetag'

" SuperTab + YouCompleteMe + UltiSnips
" http://stackoverflow.com/a/22253548/210533
Plugin 'ervandew/supertab'
Plugin 'Valloric/YouCompleteMe'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

" Search file
Plugin 'kien/ctrlp.vim'
Plugin 'rking/ag.vim'

" Language Additions
Plugin 'vim-ruby/vim-ruby'
Plugin 'digitaltoad/vim-jade'
" Old javascript plugin
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'pangloss/vim-javascript'
Plugin 'othree/yajs.vim'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'othree/html5.vim'
Plugin 'IN3D/vim-raml'
Plugin 'kchmck/vim-coffee-script'
Plugin 'klen/python-mode'
Plugin 'itspriddle/vim-jquery'
Plugin 'tpope/vim-rails'
Plugin 'ap/vim-css-color'
Plugin 'httplog'
"Plugin 'bendavis78/vim-polymer'
"Plugin 'mutewinter/taskpaper.vim'
"Old Plugin 'leshill/vim-json'
Plugin 'elzr/vim-json'
Plugin 'mutewinter/nginx.vim'
Plugin 'tpope/vim-rake'
Plugin 'webdesus/polymer-ide.vim'
" Libraries
Plugin 'L9'
Plugin 'tpope/vim-repeat'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" Set leader to ,
" Note: This line MUST come before any <leader> mappings
let mapleader=","

" ----------------------------------------
" Platform Specific Configuration
" ----------------------------------------

if has('win32') || has('win64')
  " Windows
  source $VIMRUNTIME/mswin.vim
  set guifont=Consolas:h10:cANSI
  set guioptions-=T " Toolbar
  set guioptions-=m " Menubar

  " Set height and width on Windows
  set lines=60
  set columns=120

  " Windows has a nasty habit of launching gVim in the wrong working directory
  cd ~
elseif has('gui_macvim')
  " MacVim
  set guifont=Menlo\ Regular:h12

  " Hide Toolbar in MacVim
  if has("gui_running")
    set guioptions=egmrt
  endif
endif

" ----------------------------------------
" Regular Vim Configuartion (No Plugins Needed)
" ----------------------------------------

" ---------------
" Color
" ---------------
set background=dark

"if has('termguicolors')
"	set termguicolors
"endif

" Conditionally Set colorscheme
if has('unix') && !has('gui_macvim')
  if $TERM == 'xterm-256color'
    colorscheme derfel
  elseif $TERM == 'tmux-256color'
    colorscheme derfel
  elseif $TERM == 'screen-256color'
    set t_Co=256
    colorscheme derfel
  elseif $TERM == 'vte-256color'
    colorscheme derfel
  elseif $COLORTERM == 'gnome-terminal'
    set t_Co=256
    colorscheme derfel
  elseif $TERM == 'xterm-derfel'
    set t_Co=256
    colorscheme derfel
  else
    " We can't use 256 color theme :(
    let g:CSApprox_verbose_level=0
    colorscheme xterm16
  endif
else
  " We're good if not on unix or in MacVim
  colorscheme derfel
endif


" ---------------
" Backups
" ---------------
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/tmp

" ---------------
" UI
" ---------------
set ruler  " Ruler on
set nu  " Line numbers on
set nowrap  " Line wrapping off
set laststatus=2  " Always show the statusline
set cmdheight=2
set title
set showcmd
set synmaxcol=2048	" Syntax coloring lines that are too long just slows down the world

" ---------------
" Behaviors
" ---------------
syntax enable
set autoread           " Automatically reload changes if detected
set wildmode=longest:full " sane wildoption
set wildmenu           " Turn on WiLd menu
set scrolloff=6		" Maintain more context around the cursor
set sidescrolloff=15
set sidescroll=1
set hidden             " Change buffer - without saving
set history=768        " Number of things to remember in history.
set cf                 " Enable error files & error jumping.
set clipboard+=unnamed " Yanks go on clipboard instead.
set autowrite          " Writes on make/shell commands
set timeoutlen=350     " Time to wait for a command (after leader for example)
set foldlevelstart=99  " Remove folds
set formatoptions=crql
set autochdir		" chdir to the file dir
set encoding=utf-8

" ---------------
" Text Format
" ---------------
set tabstop=8
set backspace=2 " Delete everything with backspace
set shiftwidth=8  " Tabs under smart indent
set cindent
set autoindent
set smarttab
set noexpandtab
set list listchars=tab:»·,trail:·,eol:↵ "show trailing white space
"set list listchars=tab:»·,trail:·,eol:¬ "Old value
set list! " default disable

" ---------------
" Searching
" ---------------
set ignorecase " Case insensitive search
set smartcase " Non-case sensitive search
set incsearch
set hlsearch

" ---------------
" Visual
" ---------------
set showmatch  " Show matching brackets.
set matchtime=2 " How many tenths of a second to blink

" ---------------
" Sounds
" ---------------
set noerrorbells
set novisualbell
set t_vb=

" ---------------
" Mouse
" ---------------
set mousehide  " Hide mouse after chars typed
set mouse=a  " Mouse in all modes

" Better complete options to speed it up
set complete=.,w,b,u,U

" -----------
" Undo
" -----------
set undodir=~/.vim/undodir
set undofile
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload

" ----------------------------------------
" Bindings
" ----------------------------------------
" Fixes common typos
command W w
command Q q
command WQ wq
command Wq wq
map <F1> <Esc>
imap <F1> <Esc>

" ----------------------------------------
" Personal Bindings
" ----------------------------------------
" Delete word in command mode.
map <C-W> bdw
" Empty line in command mode.
map <C-U> 1\|D
" F4: Paste with(out) indent.
set pastetoggle=<F4>
" F5: Reload File
map <F5> :e<CR>
" F6: TagBar -- Vim Class Outline viewer
nmap <F6> :TagbarToggle<CR>
" F7: converte da formato DOS a unix
map <F7> :set fileformat=unix<CR>
" F8: converte da formato unix a DOS
map <F8> :set fileformat=dos<CR>
" F9: show white space
noremap <F9> :set list!<CR>
" F3: show undotree
nnoremap <F3> :UndotreeToggle<cr>
" F2: show undotree
nnoremap <F2> :SignifyToggle<cr>

:nnoremap <CR> :nohlsearch<cr>
" clear the search buffer when hitting return

" Switch tab
map <C-Left> <Esc>:tabprev<CR>
map <C-Right> <Esc>:tabnext<CR>
map <C-n> <Esc>:tabnew

" Removes doc lookup binding because it's easy to fat finger
nmap K k
vmap K k

" Make line completion easier
imap <C-l> <C-x><C-l>

" Scrolling (Less RSI)
if has('mac') || has('macunix') || has('gui_macvim')
  nmap <D-j> <C-f>
  nmap <D-k> <C-b>
else
  nmap <M-j> <C-f>
  nmap <M-k> <C-b>
endif

" Use ; for : in normal and visual mode, less keystrokes
nnoremap ; :
vnoremap ; :
" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" ---------------
" Leader Commands
" ---------------

" https://github.com/derekwyatt/vim-config/blob/master/vimrc
" Make the current file executable
nmap <silent> <leader>x :w<cr>:!chmod 755 %<cr>:e<cr>

" Underline the current line with '='
nmap <silent> <leader>u= :t.\|s/./=/g\|:nohls<cr>
nmap <silent> <leader>u- :t.\|s/./-/g\|:nohls<cr>

" Toggle spelling mode with ,s
nmap <silent> <leader>s :set spell!<CR>
" Edit vimrc with ,v
nmap <silent> <leader>v :e ~/.vim/vimrc<CR>
" Reload vimrc
"map <silent> <leader>V :source ~/.vim/vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
map <silent> <leader>V :so $MYVIMRC<CR>

" Search the current file for what's currently in the search register and display matches
nmap <silent> <leader>fs :vimgrep /<C-r>// %<CR>:ccl<CR>:cwin<CR><C-W>J:nohls<CR>

" Search the current file for the word under the cursor and display matches
nmap <silent> <leader>fw :vimgrep /<C-r><C-w>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:nohls<CR>

" Search the current file for the WORD under the cursor and display matches
nmap <silent> <leader>fW :vimgrep /<C-r><C-a>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:nohls<CR>

" Swap two words
nmap <silent> gw :s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR>`'

" Window Movement
nmap <silent> <leader>h :wincmd h<CR>
nmap <silent> <leader>j :wincmd j<CR>
nmap <silent> <leader>k :wincmd k<CR>
nmap <silent> <leader>l :wincmd l<CR>
" Previous Window
nmap <silent> <leader>wp :wincmd p<CR>
" Equal Size Windows
nmap <silent> <leader>w= :wincmd =<CR>

" Window Splitting
nmap <silent> <leader>sh :split<CR>
nmap <silent> <leader>sv :vsplit<CR>
nmap <silent> <leader>sc :close<CR>

" Django add trans block
nmap <silent> <leader>dt vitc{% trans "" %}<ESC>4hp
vmap <leader>ds c{% trans "" %}<ESC>4hp

" Gettext add _ block
vmap <leader>gg c_()<ESC>1hp

" svuota le righe con solo spazi o tab
map <leader>slv :%s/^\s\+$//<C-M>
" cancella le righe con solo spazi o tab
map <leader>clv :g/^\s\+$/d<C-M>
" converte piu` righe vuote in una sola
map <leader>ulv :g/^$/,/./-j<C-M>
" Empty quoted lines
map <leader>slqv :%s/^[><C-I> ]\+$//<C-M>
" Delete empty quoted lines
map <leader>clqv :g/^[><C-I> ]\+$/d<C-M>
" Delete spaces between '>'
map <leader>cstq :%s/> >/>>/g<C-M>
" Toglie completamente il quote
map <leader>tq :%s/^[><C-I> ]*//g<C-M>
" rimuove le signature quotate
map <leader>cf G/^[><C-I> ]*-- $<C-M>dG
" quota il testo
" FIXME: Fare una funzione che non aggiunga lo spazio in caso di più livelli.
map <leader>aq :%s/^/> /<C-M>

" ----------------------------------------
" Auto Commands
" ----------------------------------------

if has("autocmd")
	" Set the correct file type for django template
	au BufNewFile,BufRead,BufEnter */templates/*.html set filetype=htmldjango

	" Set the correct filetype for hg commit
	au BufNewFile,BufRead hg-editor-*.txt setf hgcommit

	" Set the correct filetype for twisted tac files
	au BufNewFile,BufRead *.tac setf python

  " No formatting on o key newlines
  autocmd BufNewFile,BufEnter * set formatoptions-=o

  " No more complaining about untitled documents
  autocmd FocusLost silent! :wa

  " When editing a file, always jump to the last cursor position.
  " This must be after the uncompress commands.
  autocmd BufReadPost *
        \ if line("'\"") > 1 && line ("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

  " When editing a C/C++ file check include path for syntastic plugin.
  autocmd FileType c,cpp
  	\ let b:syntastic_cpp_cflags = substitute(system('grep ^INCLUDES Makefile 2> /dev/null | cut -d = -f 2'), '\n', '', '')
endif

" ----------------------------------------
" Syntax
" ----------------------------------------
let c_space_errors = 1
let python_space_errors = 1
let java_space_errors = 1
let ruby_space_errors = 1


" ----------------------------------------
" SmartHome
" ----------------------------------------
" Cycle between first char and first non space char
noremap  <expr> <Home> (col('.') == matchend(getline('.'), '^\s*')+1 ? '0'  : '^')
noremap  <expr> <End>  (col('.') == match(getline('.'),    '\s*$')   ? '$'  : 'g_')
vnoremap <expr> <End>  (col('.') == match(getline('.'),    '\s*$')   ? '$h' : 'g_')
imap <Home> <C-o><Home>
imap <End>  <C-o><End>

" ----------------------------------------
" Plugin Configuration
" ----------------------------------------

" ----------------------------------------
" Python-mode
" ----------------------------------------
let g:pymode_rope_complete_on_dot = 0
let g:pymode_indent = 0
let g:pymode_options_max_line_length = 130
let g:pymode_lint_options_pep8 = {'max_line_length': g:pymode_options_max_line_length, 'ignore': 'E266,C191,C391,W191'}
let g:pymode_lint_options_pylint = {'max-line-length': g:pymode_options_max_line_length}

" ----------------------------------------
" Multiple Cursors
" ----------------------------------------
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0

" ----------------------------------------
" CtrlP
" ----------------------------------------
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

set wildignore+=*/tmp/*,*.so,*.o,*.swp,*.zip

" ----------------------------------------
" Powerline
" ----------------------------------------
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 8
"let Powerline_symbols = 'fancy'

" ----------------------------------------
" Vim-Airline
" ----------------------------------------
let g:airline_theme = 'kalisi'
let g:airline_powerline_fonts = 1

let g:airline_symbols = { 'modified': '*' }
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = '♯(no branch)'
let g:airline#extensions#branch#displayed_head_limit = 20

let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#hunks#non_zero_only = 1

" From https://github.com/bling/vim-airline/issues/316
" Custmize modified flag
let g:airline_detect_modified = 0
call airline#parts#define_raw('modified', '%{&modified ? " [*]" : ""}')
call airline#parts#define_accent('modified', 'red')
let g:airline_section_c = airline#section#create(['%f', 'modified'])

" ----------------------------------------
" Signify
" ----------------------------------------
let g:numbers_exclude = ['unite', 'tagbar', 'startify', 'gundo', 'vimshell', 'w3m', 'undotree', 'minibufexpl', 'nerdtree', 'diff']

" ----------------------------------------
" Signify
" ----------------------------------------
let g:signify_vcs_list = [ 'git', 'hg' ]
let g:signify_disable_by_default = 1

" ----------------------------------------
" Undotree
" ----------------------------------------
let g:undotree_WindowLayout = 2

" ---------------
" Lusty Juggler
" ---------------
if has('unix')
  " Allows for previous buffer on unix systems without most recent patch level
  " that enable LustyJuggler to work
  nnoremap <leader>, :e#<CR>
else
  nnoremap <leader>, :LustyJugglePrevious<CR>
end
let g:LustyJugglerShowKeys=1 " Show numbers for Lusty Buffers
let g:LustyJugglerSuppressRubyWarning=1

" Make Command / Alt 1-4 change to recent buffers in LustyJuggler

if has('ruby')
  if has('mac') || has('macunix') || has('gui_macvim')
    nmap <silent><D-1> :ruby LustyJ::profile() {$lusty_juggler.send('choose',2)}<CR>
    nmap <silent><D-2> :ruby LustyJ::profile() {$lusty_juggler.send('choose',3)}<CR>
    nmap <silent><D-3> :ruby LustyJ::profile() {$lusty_juggler.send('choose',4)}<CR>
    nmap <silent><D-4> :ruby LustyJ::profile() {$lusty_juggler.send('choose',5)}<CR>
  else
    nmap <silent><M-1> :ruby LustyJ::profile() {$lusty_juggler.send('choose',2)}<CR>
    nmap <silent><M-2> :ruby LustyJ::profile() {$lusty_juggler.send('choose',3)}<CR>
    nmap <silent><M-3> :ruby LustyJ::profile() {$lusty_juggler.send('choose',4)}<CR>
    nmap <silent><M-4> :ruby LustyJ::profile() {$lusty_juggler.send('choose',5)}<CR>
  endif
end

" ---------------
" YouCompleteMe
" ---------------
let g:ycm_extra_conf_globlist = ['~/devel/*', '~/devel/*/*','!~/*']
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_disable_for_files_larger_than_kb = 10240
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" No annonying and flickering preview tab
set completeopt-=preview

" ---------------
" Ultrasnip
" ---------------
set runtimepath+=~/.vim/my_ulti_snips
let g:UltiSnipsUsePythonVersion = 3
let g:UltiSnipsSnippetDirectories=["my_ulti_snips"]
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" ---------------
" Syntastic
" ---------------
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_cpp_compiler_options = ' -std=c++0x'
" don't check on close
let g:syntastic_check_on_wq = 0
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1

let g:syntastic_html_tidy_ignore_errors = [
    \"trimming empty <i>",
    \"trimming empty <span>",
    \"<input> proprietary attribute \"autocomplete\"",
    \"proprietary attribute \"role\"",
    \"proprietary attribute \"hidden\"",
\]

let g:syntastic_javascript_checkers = ['eslint']

" ---------------
" FuzzyFinder
" ---------------
let g:fuf_modesDisable=['mrucmd'] " Enables FufMruFile
if has('mac') || has('macunix') || has('gui_macvim')
  nnoremap <silent><D-y> :FufMruFile<CR>
  nnoremap <silent><D-u> :FufFileWithCurrentBufferDir<CR>
else
  nnoremap <silent><M-y> :FufMruFile<CR>
  nnoremap <silent><M-u> :FufFileWithCurrentBufferDir<CR>
end
nnoremap <leader>fu :FufFileWithCurrentBufferDir<CR>
nnoremap <leader>ff :FufFile<CR>
nnoremap <leader>fy :FufMruFile<CR>
nnoremap <leader>fb :FufBuffer<CR>

" ---------------
" NERDTree
" ---------------
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>nn :NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFind<CR>

nmap <F12> :NERDTreeToggle<CR>
nmap <S-F12> :NERDTreeClose<CR>

let NERDTreeShowBookmarks=1
let NERDTreeChDirMode=2 " Change the NERDTree directory to the root node
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" ---------------
" Command T
" ---------------
if has("gui_macvim")
  map <D-t> :CommandT<CR>
else
  nnoremap <silent><M-t> :CommandT<CR>
endif

" ---------------
" Indent Guides
" ---------------
let g:indent_guides_auto_colors=1
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_color_change_percent=5

if has('unix') && !has('gui_macvim')
  if $TERM == 'xterm-256color'
    " Make the guides smaller since they will be crazy visible in 256color mode
    let g:indent_guides_guide_size=1
  else
	if &t_Co < 256
		" Turn off the guides when 256color mode isn't available
		let g:indent_guides_enable_on_vim_startup=0
	endif
  endif
endif

" ---------------
" Session
" ---------------

" If you don't want help windows to be restored:
set sessionoptions-=help
" Don't persist options and mappings because it can corrupt sessions.
set sessionoptions-=options

let g:session_autoload = 'yes'
let g:session_autosave = 'yes'

nnoremap <leader>os :OpenSession<CR>

" ---------------
" status.vim
" ---------------
let g:statusline_fugitive=1
let g:statusline_fullpath=0
" Everything must be after Right Separator for BufStat
let g:statusline_order=[
      \ 'Filename',
      \ 'Encoding',
      \ 'Help',
      \ 'Filetype',
      \ 'Modified',
      \ 'Fugitive',
      \ 'RVM',
      \ 'TabWarning',
      \ 'Syntastic',
      \ 'Paste',
      \ 'ReadOnly',
      \ 'RightSeperator',
      \ 'CurrentHighlight',
      \ 'CursorColumn',
      \ 'LineAndTotal',
      \ 'FilePercent']

" ---------------
" SpeedDating
" ---------------
" let g:speeddating_no_mappings=1 " Remove default mappings (C-a etc.)
nmap <silent><leader>dm <Plug>SpeedDatingDown
nmap <silent><leader>dp <Plug>SpeedDatingUp
nmap <silent><leader>dn <Plug>SpeedDatingNowUTC

" ---------------
" Nextval
" ---------------
nmap <silent> <unique> + <Plug>nextvalInc
nmap <silent> <unique> - <Plug>nextvalDec

" ---------------
" Expand Region 
" ---------------
vmap + <Plug>(expand_region_expand)
vmap - <Plug>(expand_region_shrink)

" ---------------
" Tabular
" ---------------
nmap <leader>t= :Tabularize /=<CR>
vmap <leader>t= :Tabularize /=<CR>
nmap <leader>t: :Tabularize /:\zs<CR>
vmap <leader>t: :Tabularize /:\zs<CR>
nmap <leader>t, :Tabularize /,\zs<CR>
vmap <leader>t, :Tabularize /,\zs<CR>
nmap <leader>t> :Tabularize /=>\zs<CR>
vmap <leader>t> :Tabularize /=>\zs<CR>

" ---------------
" Fugitive
" ---------------
nmap <leader>gc :Gcommit<CR>
nmap <leader>gw :Gwrite<CR>
nmap <leader>gs :Gstatus<CR>
nmap <leader>gp :Git push<CR>
nmap <leader>gd :Gdiff<CR>
" Exit a diff by closing the diff window
nmap <leader>gD :wincmd h<CR>:q<CR>

" ---------------
" Zoomwin
" ---------------
" Zoom Window to Full Size
nmap <silent> <leader>wo :ZoomWin<CR>

" ---------------
" Vundle
" ---------------
nmap <leader>bi :PluginInstall<CR>
nmap <leader>bi! :PluginInstall!<CR>
nmap <leader>bu :PluginUpdate<CR> " Because this also updates
nmap <leader>bc :PluginClean<CR>

" ----------------------------------------
" vim-cpp-enhanced-highlight
" ----------------------------------------
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_concepts_highlight = 1

" ----------------------------------------
" Functions
" ----------------------------------------

" ---------------
" SuperRetab
" ---------------
command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g

" ---------------
" OpenURL
" ---------------

if has('ruby')
ruby << EOF
  require 'open-uri'
  require 'openssl'
  
  def extract_url(url)
    re = %r{(?i)\b((?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]\{\};:'".,<>?«»“”‘’]))}

    url.match(re).to_s
  end

  def open_url
    line = VIM::Buffer.current.line

    if url = extract_url(line)
      if RUBY_PLATFORM.downcase =~ /(win|mingw)(32|64)/
        `start cmd /c chrome #{url}`
        VIM::message("Opened #{url}")
      else
        `open #{url}`
        VIM::message("Opened #{url}")
      end
    else
      VIM::message("No URL found on this line.")
    end

  end

  # Returns the contents of the <title> tag of a given page
  def fetch_title(url)
    if RUBY_VERSION < '1.9'
      open(url).read.match(/<title>(.*?)<\/title>?/i)[1]
    else
      open(url, :ssl_verify_mode => OpenSSL::SSL::VERIFY_NONE).read.match(/<title>(.*?)<\/title>?/i)[1]
    end
  end

  # Paste the title and url for the url on the clipboard in markdown format: [Title](url)
  # Note: Clobbers p register
  def paste_url_and_title
    clipboard = VIM::evaluate('@+')
    url = extract_url(clipboard)
    if url and url.strip != ""
      puts "Fetching title"
      title = fetch_title(url)
      VIM::command "let @p = '[#{title}](#{url})'"
      VIM::command 'normal! "pp'
    else
      VIM::message("Clipboard does not contain URL: '#{clipboard[1..10]}'...")
    end
  end
EOF

" Open a URL
if !exists("*OpenURL")
  function! OpenURL()
    :ruby open_url
  endfunction
endif

command! OpenUrl call OpenURL()
nnoremap <leader>o :call OpenURL()<CR>

" ---------------
" Paste link with Title
" ---------------

" Open a URL
if !exists("*PasteURLTitle")
  function! PasteURLTitle()
    :ruby paste_url_and_title
  endfunction
endif

command! PasteURLTitle call PasteURLTitle()
map <leader>pt :PasteURLTitle<CR>

endif " endif has('ruby')

" ---------------
" Fix Trailing White Space
" ---------------
map <leader>ws :%s/\s\+$//e<CR>
command! FixTrailingWhiteSpace :%s/\s\+$//e

" ---------------
" Quick spelling fix (first item in z= list)
" ---------------
function! QuickSpellingFix()
  if &spell
    normal 1z=
  else
    " Enable spelling mode and do the correction
    set spell
    normal 1z=
    set nospell
  endif
endfunction

command! QuickSpellingFix call QuickSpellingFix()
nmap <silent> <leader>z :QuickSpellingFix<CR>
